openapi: 3.0.0
info:
  description: "CT Tools is a simple API for generating and managing Classic Traveller (CT) role playing game data. This API conforms to the default Laravel [Eloquent API Resources](https://laravel.com/docs/5.5/eloquent-resources) format introduced in Laravel 5.5."
  title: "CT Tools (v1) API"
  version: "1.0"
servers:
  - url: 'http://127.0.0.1:8000/api/v1'
paths:
  /characters:
    delete:
      responses:
        '405':
          content:
            application/json:
              examples:
                response:
                  value:
                    errors:
                      - 'status: 405'
                      - 'code: 1405'
                      - 'title: Method Not Supported'
                      - >-
                        detail: The method specified in the Request Line is not
                        allowed for the resource identified by the Request
              schema:
                properties:
                  errors:
                    items: {}
                    type: array
                type: object
          description: Method Not Allowed
          headers: {}
      tags:
        - Characters
      description: ''
      summary: 405 Method Not Supported
    get:
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      - id: 2
                        name: El Barto
                        sex: M
                        title: Duke
              schema:
                properties:
                  data:
                    items: {}
                    type: array
                type: object
          description: OK
          headers: {}
      tags:
        - Characters
      description: >-
        List full detail on all characters.

        The universal personality profile (UPP) is represented by an integer
        from 1 to 15.
      summary: List All Characters
    post:
      responses:
        '201':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      id: 2
                      name: El Barto
                      sex: M
                      title: Duke
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The unique identifier for a character.
                        type: number
                      name:
                        description: Name of the character.
                        type: string
                      sex:
                        description: 'Sex of the character. ISO/IEC 5218. NULL, M, F, X.'
                        type: string
                      title:
                        description: Hereditary title.
                        type: string
                    required:
                      - id
                      - name
                    type: object
                type: object
          description: Created
          headers:
            Location:
              schema:
                type: string
      tags:
        - Characters
      description: >-
        You may generate new characters using this action.

        This action takes a JSON payload, specifying the name and sex of the
        character, as part of the request.

        The response header contains the location of the newly generated
        character.

        The response body contains full character data;


        * new unique id,


        * name and sex given in the request,


        * a noble title based on the character's social standing,


        * randomly generated (2D roll) universal personality profile (UPP) with
        initial values from 2 to 12.
      summary: Generate a New Character
    put:
      responses:
        '405':
          content:
            application/json:
              examples:
                response:
                  value:
                    errors:
                      - 'status: 405'
                      - 'code: 1405'
                      - 'title: Method Not Supported'
                      - >-
                        detail: The method specified in the Request Line is not
                        allowed for the resource identified by the Request
              schema:
                properties:
                  errors:
                    items: {}
                    type: array
                type: object
          description: Method Not Allowed
          headers: {}
      tags:
        - Characters
      description: ''
      summary: 405 Method Not Supported
  '/characters/{id}':
    delete:
      parameters:
        - description: ID of the Character in the form of an integer.
          in: path
          name: id
          required: true
          schema:
            type: number
      responses:
        '204':
          description: No Content
          headers: {}
      tags:
        - Characters
      description: ''
      summary: Delete a Character
    get:
      parameters:
        - description: ID of the Character in the form of an integer.
          in: path
          name: id
          required: true
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      id: 2
                      name: El Barto
                      sex: M
                      title: Duke
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The unique identifier for a character.
                        type: number
                      name:
                        description: Name of the character.
                        type: string
                      sex:
                        description: 'Sex of the character. ISO/IEC 5218. NULL, M, F, X.'
                        type: string
                      title:
                        description: Hereditary title.
                        type: string
                    required:
                      - id
                      - name
                    type: object
                type: object
          description: OK
          headers: {}
      tags:
        - Characters
      description: ''
      summary: View a Character's Detail
    post:
      parameters:
        - description: ID of the Character in the form of an integer.
          in: path
          name: id
          required: true
          schema:
            type: number
      responses:
        '405':
          content:
            application/json:
              examples:
                response:
                  value:
                    errors:
                      - 'status: 405'
                      - 'code: 1405'
                      - 'title: Method Not Supported'
                      - >-
                        detail: The method specified in the Request Line is not
                        allowed for the resource identified by the Request
              schema:
                properties:
                  errors:
                    items: {}
                    type: array
                type: object
          description: Method Not Allowed
          headers: {}
      tags:
        - Characters
      description: ''
      summary: 405 Method Not Supported
    put:
      parameters:
        - description: ID of the Character in the form of an integer.
          in: path
          name: id
          required: true
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              examples:
                response:
                  value:
                    data:
                      id: 2
                      name: El Barto
                      sex: M
                      title: Duke
              schema:
                properties:
                  data:
                    properties:
                      id:
                        description: The unique identifier for a character.
                        type: number
                      name:
                        description: Name of the character.
                        type: string
                      sex:
                        description: 'Sex of the character. ISO/IEC 5218. NULL, M, F, X.'
                        type: string
                      title:
                        description: Hereditary title.
                        type: string
                    required:
                      - id
                      - name
                    type: object
                type: object
          description: OK
          headers: {}
      tags:
        - Characters
      description: ''
      summary: Update a Character's Detail
components:
  schemas:
    Attribute:
      properties:
        cost:
          description: Cost in credits.
          type: number
        datatype:
          description: 'The datatype of the attribute. One of: number, string.'
          type: string
        description:
          description: The short description of the attribute.
          type: string
        id:
          description: The unique identifier for a attribute.
          type: number
        max_value:
          description: 'For numeric attributes, the maximum value this attribute can take.'
          type: number
        min_value:
          description: 'For numeric attributes, the minimum value this attribute can take.'
          type: number
        name:
          description: The name of the attribute.
          type: string
        notes:
          description: Long form extra notes describing the attribute if required.
          type: string
        tl:
          description: Technology level.
          type: number
        type:
          description: The type of the attribute.
          type: string
        weight:
          description: Weight in grams.
          type: number
      required:
        - id
        - type
        - name
      type: object
    Character:
      properties:
        id:
          description: The unique identifier for a character.
          type: number
        name:
          description: Name of the character.
          type: string
      required:
        - id
        - name
      type: object
    Character_Collection: {}
    Character_Detail:
      allOf:
        - $ref: '#/components/schemas/Character'
        - properties:
            sex:
              description: 'Sex of the character. ISO/IEC 5218. NULL, M, F, X.'
              type: string
            title:
              description: Hereditary title.
              type: string
          type: object
    Error400:
      properties:
        errors:
          items: {}
          type: array
      type: object
    Error404:
      properties:
        errors:
          items: {}
          type: array
      type: object
    Error405:
      properties:
        errors:
          items: {}
          type: array
      type: object
tags:
  - description: >-
      Resources related to player and non-player characters. Provides for the


      * automatic generation or character data for non-player characters (NPC),


      * storage of pre-generated character data for players,


      * update and deletion of stored character data, and


      * retrieval of all character data in bulk as well as indavidually for
      generation of character data sheets.


      <table>
        <tr>
          <th>URL</th><th>GET<br>read</th><th>POST<br>create</th><th>PUT<br>update</th><th>DELETE</th>
        </tr>
        <tr>
          <td>/characters</td><td>Returns a list of characters</td><td>Create a new character</td><td>(405)</td><td>(405)</td>
        <tr>
          <td>/characters/{id}</td><td>Returns a specific character</td><td>(405)</td><td>Updates a specific character</td><td>Deletes a specific character</td>
        </tr>
      </table>
    name: Characters

